`timescale 1ns / 1ps



module decoder(in, out);
    input [3:0] in;
    output [31:0] out;
    reg [31:0] out_reg;
    
    always@(*)
        case (in)
            4'b0000: out_reg = 32'b00000000000000000000000000000000;
            4'b0001: out_reg = 32'b11111111111111111111111111111111;
            4'b0010: out_reg = 32'b00000000111111110000000011111111;
            4'b0011: out_reg = 32'b11111111000000001111111100000000;

            4'b0100: out_reg = 32'b00001111000011110000111100001111;
            4'b0101: out_reg = 32'b11110000111100001111000011110000;
            4'b0110: out_reg = 32'b00110011001100110011001100110011;
            4'b0111: out_reg = 32'b11001100110011001100110011001100;

            4'b1000: out_reg = 32'b01010101010101010101010101010101;
            4'b1001: out_reg = 32'b10101010101010101010101010101010;
            4'b1010: out_reg = 32'b01101111111110100011100101111001;
            4'b1011: out_reg = 32'b11110100010111101000110000011011;

            4'b1100: out_reg = 32'b10010011010010111010010000111111;
            4'b1101: out_reg = 32'b10011110111101111101111001010010;
            4'b1110: out_reg = 32'b01010100010000011011110110000110;
            4'b1111: out_reg = 32'b00010000110100001010000010111110;        
        endcase
    assign out = out_reg;
endmodule
